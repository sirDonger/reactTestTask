Javascript:
1. In my opinion, in ES6 it is Classes, array functions, async await, let, const.
2. I always use this feature in my work because now I codding only on ES6 syntax. For example array functions that very quickly, comfortable for callback.
3. I know two global differences like:
a. arrow function doesn't have *this*
b. Hoisting
4. I can show you some example in differences:
let firstNumber = 1;
let secondNumber = 1;
console.log(++firstNumber, secondNumber++) // results  2 1
5. In my opinion, when a class extends father it copies his method, and when we do this via function prototypes it saved reference on method. But in general, the class is syntax sugar on function. 

Css:
6. css specificity is that: classes are stronger than a tag, but weak than id and important! is stronger than all
7. Important! It is the strongest in CSS and important! we shouldn't use everywhere, just if we need it a lot. for example when we use some library.
8. I prefer Flex because it is very useful and easy and comfortable for me. But sometimes I use a grid because of it convenient. 
9. Yes, it is legal, but if you use margin-right: -20px, then the content moved on right.
10. If we have <p/> tag with a margin <div/> will be move with it. How we can avoid it we can use padding instead of margin.

Unit tests:
11. I have experience with Jest Framework
12. No, fortunately, I didn't have any problem with it.
13. 

React:
14: 
class Test extends React.Component {
  state = {
    windowSize: window.innerWidth
  };

  componentDidMount() {
    window.addEventListener("resize", this.resize.bind(this));
    this.resize();
  }
    
  resize() {
    this.setState({windowSize: window.innerWidth});
  }

  render() {
    const { windowSize } = this.state;

    return (
      <div>
        <span>{windowSize}</span>
      </div>
    );
  }
}
15: class Test extends React.Component {
  state = {
    windowSize: window.innerWidth,
    inputValue: ''
  };

  componentDidMount() {
    window.addEventListener("resize", this.resize.bind(this));
    this.resize();
  }
    
  resize() {
    this.setState({windowSize: window.innerWidth});
  }

  inputHandler = (event) => {
    if (event.key == 'Enter' ) {
      this.setState({ inputValue: event.target.value });
    }
  }

  render() {
    const { windowSize, inputValue } = this.state;

    return (
      <div style={{ backgroundColor: 'red', height: `${inputValue}px` }}>
        <input type="text" onKeyPress={this.inputHandler} />
        <span>{windowSize}</span>
      </div>
    );
  }
}

16:let divHeight;
window.setDivHeight = (height) => divHeight = height;

class Test extends React.Component {
  state = {
    windowSize: window.innerWidth,
    inputValue: ''
  };

  componentDidMount() {
    window.addEventListener("resize", this.resize.bind(this));
    this.resize();
  }
    
  resize() {
    this.setState({windowSize: window.innerWidth});
  }

  inputHandler = (event) => {
    if (event.key == 'Enter' ) {
      this.setState({ inputValue: event.target.value });
    }
  }

  render() {
    const { windowSize, inputValue } = this.state;
    const { height } = this.props;

    return (
      <div style={{ backgroundColor: 'red', height: `${height}px` }}>
        <input type="text" onKeyPress={this.inputHandler} />
        <span>{windowSize}</span>
      </div>
    );
  }
}

const HOC = (Test) => {
  return <Test height={divHeight} />
};

RXjs:
17. Subject - a subscriber will only get published values that were emitted after the subscription. Ask yourself, is that what you want? 
Does the subscriber need to know anything about previous values? If not, then you can use this, otherwise choose one of the others. 
For example, with component-to-component communication. Say you have a component that publishes events for other components on a button click. 
You can use a service with a subject to communicate.

BehaviorSubject - the last value is cached. An subscriber will get the latest value upon initial subscription. 
The semantics for this subject is to represent a value that changes over time. For example a logged in user. 
The initial user might be an anonymous user. But once a user logs in, then the new value is the authenticated user state.

The BehaviorSubject is initialized with an initial value. This is sometimes important to coding preference. 
Say for instance you initialize it with a null. Then in your subscription, you need to do a null check. Maybe OK, or maybe annoying.

ReplaySubject - it can cache up to a specified number of emissions. Any subscribers will get all the cached values upon subscription. 
When would you need this behavior? Honestly I have not had need for such behavior, except for the following case:

If you initialize a ReplaySubject with a buffer size of 1, then it actually behaves just like a BehaviorSubject. 
The last value is always cached, so it acts like a value changing over time. 
With this, there is no need for a null check like in the case of the BehaviorSubject initialized with a null, because no value is ever emitted to the subscriber until the first publishing.
18.const name$ = this._personService.getName(id);
const document$ = this._documentService.getDocument();

combineLatest(name$, document$, (name, document) => ({name, document}))
    .subscribe(pair => {
           this.name = pair.name;
           this.document = pair.document;
           this.showForm();
       })
19.getMoviesDataByImdbIds(ids: number[]):Observable<IMovie[]> {
    return Observable.of(...ids).flatMap( (id) => {
      let params = new HttpParams().set('i',this.getIMDBIdString(id)).set('apikey', API_KEY);
      return this.http.get(API_URL, {params}).map( data => {
         return this.extractMovieData(data);
      })
   }).scan( (acc, movie) => {
       return acc.concat(movie)
   }, []);
}

Twilio:
I have used Twilio Apis years ago, so I need to refresh my mind, but it won't a problem. 
I always using this site https://www.twilio.com/docs/iam/api
